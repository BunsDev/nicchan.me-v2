---
import { type CollectionEntry, getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Window from "../../components/Window.svelte";
import TableOfContents from "@components/TableOfContents.astro";
import TableOfContentsObserver from "@components/TableOfContentsObserver.svelte";

export async function getStaticPaths() {
	const posts = await getCollection("blog");
	return posts.map((post) => ({
		params: { slug: post.slug },
		props: post,
	}));
}
type Props = CollectionEntry<"blog">;

const post = Astro.props;
const { Content, headings } = await post.render();
const { title, description, pubDate } = post.data;
const splitTitle = post.data.title.split(":");
---

<Layout title={title} description={description}>
	<div class="layout__grid post">
		<div class="layout__cell post__toc">
			<Window
				title="Table of Contents"
				order={0}
				titleTag="h2"
				style="--max-width: 25rem; --block-start: 10rem; --inline-start: 0"
				client:load>
				<TableOfContents headings={headings} />
				<TableOfContentsObserver client:only="svelte" />
			</Window>
		</div>
		<div class="layout__cell post__content">
			<Window title="Post" order={1} titleTag="span" flex client:load>
				<div class="window__body">
					<div class="rte container">
						<h1 class="text--base post__title">
							{
								splitTitle.length > 1 ? (
									<>
										<span class="post__title-pretitle h3">
											{splitTitle[0]}:
										</span>
										<span class="post__title-main h1">{splitTitle[1]}</span>
									</>
								) : (
									<span class="post__title-main h1">{title}</span>
								)
							}
						</h1>
						<p>
							<time class="post__date">
								{
									new Intl.DateTimeFormat("en-GB", {
										dateStyle: "long",
									}).format(new Date(pubDate))
								}
							</time>
						</p>
						<Content />
					</div>
				</div>
			</Window>
		</div>
	</div>
</Layout>

<style lang="scss">
	.post__content {
		min-width: 0;

		&:global(window) {
			width: 100%;
		}
	}

	.post__title {
		margin: 1rem 0 1rem;
		line-height: 1;
	}

	.post__date {
		display: block;
		border-bottom: var(--border-thickness) dashed var(--color-text-accent);
		margin-bottom: var(--space-xs);
		color: var(--color-text-heading);
		text-transform: uppercase;
	}

	.post__title:has(.post__title-pretitle) {
		margin: 0.75rem 0 1rem;
	}

	.post__title-main {
		display: block;
		filter: drop-shadow(0 -0.125rem 0 var(--color-accent-text-1))
			drop-shadow(0.125rem 0.125rem 0 var(--color-accent-text-2));
		background: linear-gradient(
			177deg,
			var(--color-text-heading) 50%,
			var(--color-text-subheading)
		);
		background-clip: text;
		color: transparent;
	}

	@media (min-width: 62em) and (min-height: 34em) {
		.post {
			grid-template-columns: 20rem 1fr;
			gap: var(--space-s);
		}
	}
</style>
