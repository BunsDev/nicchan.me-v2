*,
*::before,
*::after {
	box-sizing: border-box;
}

::selection {
	background-color: light-dark(
		var(--color-mauve-darkest),
		var(--color-mauve-lightest)
	);
	color: light-dark(var(--color-white), var(--color-violet));
}

html,
body {
	min-block-size: 100%;
	font-family: var(--font-base);
	line-height: 1.6;
	background-color: var(--color-bg);
	background-image: url("https://res.cloudinary.com/nicchan/image/upload/f_auto/bg-5.png");
	background-size: cover;
	background-position: center;
	background-attachment: fixed;
}

html {
	&:has(.window__wrapper--maximized) {
		overflow-y: hidden;
	}
}

img {
	max-inline-size: 100%;
	block-size: auto;
	image-rendering: crisp-edges;
	image-rendering: -moz-crisp-edges;
	image-rendering: pixelated;
	// background-color: var(--color-image-fallback);
}

video {
	max-inline-size: 100%;
	block-size: auto;
}

p {
	margin: 0;

	// Have to qualify as not empty as Svelte injects an extra p tag? fun
	&:not(:empty) + &:not(:empty) {
		margin-block-start: 1rem;
	}
}

button,
input {
	font-family: inherit;
}

button * {
	pointer-events: none;
}

.stack > * + * {
	margin-block-start: 1rem;
}

pre,
code {
	background-color: var(--color-box-bg);
	color: var(--color-box-text);
}

pre {
	--border-color: var(--color-box-border);
	min-inline-size: 0;
	inline-size: 100%;
	overflow: auto;

	&:has(code) {
		@include pixel-borders;
	}
}

code {
	padding: 0.25rem;
	font-family: var(--font-code);
	font-size: 0.875em;
}

pre code {
	display: block;
	padding: 0.5rem 1rem;
	font-size: 1rem;
	tab-size: 1rem;
	font-family: var(--font-code);
}

input[type="text"],
input[type="email"],
input[type="number"],
textarea,
select {
	@include pixel-borders;
	background-color: var(--color-box-bg);
	padding: calc(var(--border-thickness) * 2);
	color: inherit;
	font-size: inherit;
}

fieldset {
	border: none;
	margin: 0;
	padding: 0;
}

legend {
	font-family: var(--font-accent);
	font-size: 1.5rem;
}

hr {
	margin: var(--space-xs) 0;
	border: none;
	border-block-end: var(--border-thickness) dashed var(--color-text-accent);
}

@keyframes animate {
	from {
		opacity: 0;
	}
	to {
		opacity: 1;
	}
}

@keyframes animate2 {
	from {
		inline-size: 10px;
	}
	to {
		inline-size: 30px;
	}
}

.hidden {
	opacity: 0;
}

::view-transition-group(footer) {
	z-index: 1000;
}

@mixin motion($root) {
	#{$root}::view-transition-group(*),
	#{$root}::view-transition-old(*),
	#{root}::view-transition-new(*) {
		animation: none !important;
	}
	#{$root} {
		*,
		*::before,
		*::after {
			transition-duration: 0.001s !important;
		}
	}
}

@media (prefers-reduced-motion: reduce) {
	@include motion('html:not([data-user-motion="enabled"])');
}

@include motion('html[data-user-motion="disabled"]');
